# -*- coding: utf-8 -*-
"""Project Akhir Klasifikasi Gambar.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uzYTwbdzLWl6WnVWh0-Ti1V1RsZi8dEb

Nama: Habi Jiyan Mustaqim

Email: habijiyan111@gmail.com

Kota: Sleman, D.I. Yogyakarta
"""

import os
import zipfile
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from sklearn.model_selection import train_test_split

# Download the dataset
!wget https://github.com/dicodingacademy/assets/releases/download/release/rockpaperscissors.zip -O /tmp/rockpaperscissors.zip

# Extract the dataset
with zipfile.ZipFile('/tmp/rockpaperscissors.zip', 'r') as zip_ref:
    zip_ref.extractall('/tmp')

# Set dataset path
dataset_path = '/tmp/rockpaperscissors/rps-cv-images'

# Split the dataset into training and validation sets
train_datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=20,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest',
    validation_split=0.4 # 40% for validation
)

train_generator = train_datagen.flow_from_directory(
    dataset_path,
    target_size=(150, 150),
    batch_size=32,
    class_mode='categorical',
    subset='training' # set as training data
)

validation_generator = train_datagen.flow_from_directory(
    dataset_path,
    target_size=(150, 150),
    batch_size=32,
    class_mode='categorical',
    subset='validation' # set as validation data
)

model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(150, 150, 3)),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(512, activation='relu'),
    tf.keras.layers.Dense(3, activation='softmax')
])

model.compile(loss='categorical_crossentropy',
              optimizer='adam',
              metrics=['accuracy'])

model.summary()

# Train the model
history = model.fit(
    train_generator,
    steps_per_epoch=train_generator.samples // train_generator.batch_size,
    validation_steps=validation_generator.samples // validation_generator.batch_size,
    epochs=15,
    validation_data=validation_generator,
    verbose=1
)

# Commented out IPython magic to ensure Python compatibility.
# Evaluate the model
loss, accuracy = model.evaluate(validation_generator)
print(f'Validation Accuracy: {accuracy * 100:.2f}%')

# Predict an uploaded image
from google.colab import files
from tensorflow.keras.utils import load_img, img_to_array
import numpy as np
from google.colab import files
from tensorflow.keras.preprocessing import image
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
# %matplotlib inline

uploaded = files.upload()

for fn in uploaded.keys():
    # predicting images
    path = fn
    img = load_img(path, target_size=(150, 150))
    x = img_to_array(img)
    x = x / 255.0
    x = x.reshape((1,) + x.shape)

    imgplot = plt.imshow(img)
    x = image.img_to_array(img)
    x = np.expand_dims(x, axis=0)


    images = np.vstack([x])
    classes = model.predict(images, batch_size=10)
    class_names = ['paper', 'rock', 'scissors']
    print(f'This image most likely belongs to {class_names[np.argmax(classes)]} with a {100 * np.max(classes):.2f}% confidence.')